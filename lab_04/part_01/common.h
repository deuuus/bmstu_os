#pragma once

#ifndef __CONST_HEADER__
#define __CONST_HEADER__
    const char *WITH_DESCR[] = {
        "pid                    %20s // The process ID.\n",
        "comm                   %20s // The filename of the executable, in parentheses.\n",
        "state                  %20s // One of the characters indicating process state.\n",
        "ppid                   %20s // The PID of the parent of this process.\n",
        "pgrp                   %20s // The process group ID of the process.\n",
        "session                %20s // The session ID of the process.\n",
        "tty_nr                 %20s // The controlling terminal of the process.\n",
        "tpgid                  %20s // The ID of the foreground process group of the controlling terminal of the process.\n",
        "flags                  %20s // The kernel flags word of the process.\n",
        "minflt                %20s // The number of minor faults the process has made which have not required loading a memory page from disk.\n",
        "cminflt               %20s // The number of minor faults that the process's waited-for children have made.\n",
        "majflt                %20s // The number of major faults the process has made which have required  loading  a  memory  page from disk.\n",
        "cmajflt               %20s // The number of major faults that the process's waited-for children have made.\n",
        "utime                 %20s // Amount of time that this process has been scheduled in user mode, measured in clock ticks.\n",
        "stime                 %20s // Amount of time that this process has been scheduled in kernel mode, measured in  clock  ticks.\n",
        "cutime                %20s // Amount of time that this process's waited-for children have been scheduled in user mode, measured in clock ticks.\n",
        "cstime                %20s // Amount of time that this process's waited-for children have been scheduled in kernel mode, measured in clock ticks.\n",
        "priority              %20s // For processes running a real-time scheduling policy.\n",
        "nice                  %20s // The nice value (see setpriority(2)), a value in the range 19 (low priority) to -20 (high priority).\n",
        "num_threads           %20s // Number of threads in this process (since Linux 2.6). Before kernel 2.6, this field was hardcoded to 0 as a placeholder for an earlier removed field.\n",
        "itrealvalue           %20s // The time in jiffies before the next SIGALRM is sent to the process due to an interval timer.\n",
        "starttime             %20s // The time the process started after system boot.\n",
        "vsize                 %20s // Virtual memory size in bytes.\n",
        "rss                   %20s // Resident Set Size: number of pages the process has in real memory.\n",
        "rsslim                %20s // Current soft limit in bytes on the rss of the process.\n",
        "startcode             %20s // The address above which program text can run.\n",
        "endcode               %20s // The address below which program text can run.\n",
        "startstack            %20s // The address of the start (i).e., bottom) of the stack.\n",
        "kstkesp               %20s // The current value of ESP (stack pointer), as found in the kernel stack page for the process.\n",
        "kstkeip               %20s // The current EIP (instruction pointer).\n",
        "signal                %20s // The  bitmap of pending signals, displayed as a decimal number.\n",
        "blocked               %20s // The bitmap of blocked signals, displayed as a decimal number.\n",
        "sigignore             %20s // The  bitmap of ignored signals, displayed as a decimal number.\n",
        "sigcatch              %20s // The bitmap of caught signals, displayed as a decimal number.\n",
        "wchan                 %20s // This is the \"channel\" in which the process is waiting.\n",
        "nswap                 %20s // Number of pages swapped (not maintained).\n",
        "cnswap                %20s // Cumulative nswap for child processes (not maintained).\n",
        "exit_signal           %20s // (since Linux 2.1.22) Signal to be sent to parent when we die.\n",
        "processor             %20s // (since Linux 2.2.8) CPU number last executed on.\n",
        "rt_priority           %20s // (since Linux 2.5.19) Real-time scheduling priority, a number in the range 1 to 99 for processes scheduled under a real-time policy, or 0, for non-real-time processes.\n",
        "policy                %20s // (since Linux 2.5.19) Scheduling policy.\n",
        "delayacct_blkio_ticks %20s // (since Linux 2.6.18) Aggregated block I/O delays, measured in clock ticks (centiseconds).\n",
        "guest_time            %20s // (since Linux 2.6.24) Guest time of the process (time spent running a virtual CPU for a guest operating system), measured in clock ticks.\n",
        "cguest_time           %20s // (since Linux 2.6.24) Guest time of the process's children, measured in clock ticks.\n",
        "start_data            %20s // (since Linux 3.3) Address above which program initialized and uninitialized (BSS) data are placed.\n",
        "end_data              %20s // (since Linux 3.3) Address below which program initialized and uninitialized (BSS) data are placed.\n",
        "start_brk             %20s // (since Linux 3.3) Address above which program heap can be expanded with brk(2).\n",
        "arg_start             %20s // (since Linux 3.5) Address above which program command-line arguments (argv) are placed.\n",
        "arg_end               %20s // (since Linux 3.5) Address below program command-line arguments (argv) are placed.\n",
        "env_start             %20s // (since Linux 3.5) Address above which program environment is placed.\n",
        "env_end               %20s // (since Linux 3.5) Address below which program environment is placed.\n",
        "exit_code             %20s // (since Linux 3.5) The thread's exit status in the form reported by waitpid(2).\n"};

    const char *NO_DESCR[] = {
        "pid                    %20s\n",
        "comm                   %20s\n",
        "state                  %20s\n",
        "ppid                   %20s\n",
        "pgrp                   %20s\n",
        "session                %20s\n",
        "tty_nr                 %20s\n",
        "tpgid                  %20s\n",
        "flags                  %20s\n",
        "minflt                %20s\n",
        "cminflt               %20s\n",
        "majflt                %20s\n",
        "cmajflt               %20s\n",
        "utime                 %20s\n",
        "stime                 %20s\n",
        "cutime                %20s\n",
        "cstime                %20s\n",
        "priority              %20s\n",
        "nice                  %20s\n",
        "num_threads           %20s\n",
        "itrealvalue           %20s\n",
        "starttime             %20s\n",
        "vsize                 %20s\n",
        "rss                   %20s\n",
        "rsslim                %20s\n",
        "startcode             %20s\n",
        "endcode               %20s\n",
        "startstack            %20s\n",
        "kstkesp               %20s\n",
        "kstkeip               %20s\n",
        "signal                %20s\n",
        "blocked               %20s\n",
        "sigignore             %20s\n",
        "sigcatch              %20s\n",
        "wchan                 %20s\n",
        "nswap                 %20s\n",
        "cnswap                %20s\n",
        "exit_signal           %20s\n",
        "processor             %20s\n",
        "rt_priority           %20s\n",
        "policy                %20s\n",
        "delayacct_blkio_ticks %20s\n",
        "guest_time            %20s\n",
        "cguest_time           %20s\n",
        "start_data            %20s\n",
        "end_data              %20s\n",
        "start_brk             %20s\n",
        "arg_start             %20s\n",
        "arg_end               %20s\n",
        "env_start             %20s\n",
        "env_end               %20s\n",
        "exit_code             %20s\n"};

    const char *STATM_PATTERNS[] = {
        "size     %8s  (1)\n",
        "resident %8s  (2)\n",
        "shared   %8s  (3)\n",
        "text     %8s  (4)\n",
        "lib      %8s  (5)\n",
        "data     %8s  (6)\n",
        "dt       %8s  (7)\n"};
#endif